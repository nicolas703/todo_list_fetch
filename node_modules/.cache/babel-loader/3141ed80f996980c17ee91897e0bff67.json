{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicol\\\\OneDrive\\\\Escritorio\\\\todo-list-API\\\\todo\\\\src\\\\input.js\";\nimport React, { useState, useEffect } from 'react';\nimport Notarea from './tareas';\n\nconst Apa = props => {\n  const [tarea, setTarea] = useState([]);\n  const [input, setInput] = useState('');\n\n  const enviarTarea = (e, tarea, setTarea, input, setInput) => {\n    e.preventDefault();\n    const id = tarea.length ? tarea[tarea.length - 1].id + 1 : 1;\n    setTarea([...tarea, {\n      id: id,\n      nota: input\n    }]);\n    setInput('');\n    fetch('https://assets.breatheco.de/apis/fake/todos/user/nicolas703', {\n      method: \"PUT\",\n      body: JSON.stringify(tarea),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => {\n      console.log(resp.ok); // Será true (verdad) si la respuesta es exitosa.\n\n      console.log(resp.status); // el código de estado = 200 o código = 400 etc.\n\n      console.log(resp.text()); // Intentará devolver el resultado exacto como cadena (string)\n\n      return resp.json;\n    }).then(data => {\n      console.log(data); //esto imprimirá en la consola el objeto exacto recibido del servidor\n    }).catch(error => {\n      console.error('El error es ' + error);\n    });\n  };\n\n  const deleteTarea = (id, tarea, setTarea) => {\n    setTarea(tarea.filter(note => note.id !== id));\n  };\n\n  const queHay = () => {\n    fetch('https://assets.breatheco.de/apis/fake/todos/user/nicolas703', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      console.log(res.status);\n      console.log(res.text());\n    }).then(data => {\n      console.log(data.labek);\n      setTarea([...tarea, {\n        id: id,\n        nota: input\n      }]);\n    }).catch(error => console.error('Error ', error));\n  };\n\n  useEffect(() => {\n    queHay();\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"titulo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"To Do List\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"libreta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dib\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => enviarTarea(e, tarea, setTarea, input, setInput),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"A\\xF1ade una tarea\",\n    className: \"nota\",\n    onChange: e => setInput(e.target.value),\n    value: input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"agg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, \"+\")), tarea.map((note, i) => /*#__PURE__*/React.createElement(Notarea, {\n    key: i,\n    nota: note.nota,\n    id: note.id,\n    deleteTarea: id => deleteTarea(id, tarea, setTarea),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default Apa;","map":{"version":3,"sources":["C:/Users/nicol/OneDrive/Escritorio/todo-list-API/todo/src/input.js"],"names":["React","useState","useEffect","Notarea","Apa","props","tarea","setTarea","input","setInput","enviarTarea","e","preventDefault","id","length","nota","fetch","method","body","JSON","stringify","headers","then","resp","console","log","ok","status","text","json","data","catch","error","deleteTarea","filter","note","queHay","res","labek","target","value","map","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Notarea from './tareas'\r\n\r\nconst Apa = props => {\r\n\r\n    const [tarea, setTarea] = useState([])\r\n    const [input, setInput] = useState('')\r\n\r\n    const enviarTarea = (e, tarea, setTarea, input, setInput) => {\r\n        e.preventDefault()\r\n        const id = (tarea.length) ? tarea[tarea.length - 1].id + 1 : 1\r\n\r\n        setTarea([...tarea, { id: id, nota: input }])\r\n        setInput('')\r\n\r\n\r\n        fetch('https://assets.breatheco.de/apis/fake/todos/user/nicolas703', {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(tarea),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n            .then(resp => {\r\n                console.log(resp.ok); // Será true (verdad) si la respuesta es exitosa.\r\n                console.log(resp.status); // el código de estado = 200 o código = 400 etc.\r\n                console.log(resp.text()); // Intentará devolver el resultado exacto como cadena (string)\r\n                return resp.json;\r\n            })\r\n            .then(data => {\r\n                console.log(data); //esto imprimirá en la consola el objeto exacto recibido del servidor\r\n            })\r\n            .catch(error => {\r\n                console.error('El error es ' + error);\r\n            });\r\n\r\n\r\n    }\r\n    const deleteTarea = (id, tarea, setTarea) => {\r\n        setTarea(tarea.filter(note => note.id !== id))\r\n    }\r\n\r\n    const queHay = ()=>{\r\n        fetch('https://assets.breatheco.de/apis/fake/todos/user/nicolas703',{\r\n            method: \"GET\",\r\n            headers: {\"Content-Type\": \"application/json\"}})\r\n        .then(res=>{\r\n            console.log(res.status)\r\n            console.log(res.text());\r\n        })\r\n        .then(data=>{\r\n            console.log(data.labek);\r\n            setTarea([...tarea, { id: id, nota: input }])\r\n        })\r\n        .catch(error=> console.error('Error ', error));\r\n    };\r\n\r\n      useEffect(() => {     \r\n        queHay();\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"titulo\">To Do List</h1>\r\n            <div className=\"libreta\">\r\n                <div className=\"dib\">\r\n                    <form onSubmit={(e) => enviarTarea(e, tarea, setTarea, input, setInput)}>\r\n                        <input placeholder=\"Añade una tarea\" className=\"nota\" onChange={(e) => setInput(e.target.value)} value={input} />\r\n                        <button className=\"agg\">+</button>\r\n\r\n                    </form>\r\n                    {tarea.map((note, i) => (\r\n                        <Notarea key={i} nota={note.nota} id={note.id} deleteTarea={(id) => deleteTarea(id, tarea, setTarea)}/>\r\n\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default Apa; "]},"metadata":{},"sourceType":"module"}